<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE sqlMap 
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" 
    "http://ibatis.apache.org/dtd/sql-map-2.dtd"> 
<sqlMap namespace="User">
	
	<typeAlias alias="UserContact" type="net.solarnetwork.central.dras.domain.UserContact"/>
	<typeAlias alias="UserRole" type="net.solarnetwork.central.dras.domain.UserRole"/>
	
	<insert id="insert-User" parameterClass="User">
		<selectKey resultClass="long" keyProperty="id"> 
              SELECT nextval('solardras.solardras_seq') AS id 
		</selectKey>
		INSERT INTO solardras.dras_user 
			(id, username, passwd, disp_name, address, vendor, enabled)
		VALUES
			(#id#, #username#, #password#, #displayName#, 
			#address,jdbcType=ARRAY#, 
			#vendor#, #enabled#)
	</insert>

	<update id="update-User" parameterClass="User">
		UPDATE solardras.dras_user SET
			username = #username#,
			passwd = #password#, 
			disp_name = #displayName#, 
			address = #address,jdbcType=ARRAY#,
			vendor = #vendor#,
			enabled = #enabled#
		WHERE
			id = #id#
			AND id &lt;&gt;0
	</update>

	<resultMap id="UserFullResult" class="User" groupBy="id">
		<result column="id" property="id"/>
		<result column="created" property="created"/>
		<result column="username" property="username"/>
		<result column="passwd" property="password"/>
		<result column="disp_name" property="displayName"/>
		<result column="address" property="address" jdbcType="ARRAY"/>
		<result column="vendor" property="vendor"/>
		<result column="enabled" property="enabled"/>
		<result property="contactInfo" resultMap="User.UserContactFullResult"/>
	</resultMap>
	
	<select id="get-User-for-id" resultMap="UserFullResult" parameterClass="long">
		SELECT u.*, c.kind, c.contact, c.priority
		FROM solardras.dras_user u
		LEFT OUTER JOIN solardras.dras_user_contact c ON c.usr_id = u.id
		WHERE u.id = #id#
		ORDER BY c.idx
	</select>
	
	<resultMap id="UserFilterRoleResult" class="string">
		<result column="rolename" property="roleNames"/>
	</resultMap>
	
	<resultMap id="UserFilterResult" class="User" groupBy="id">
		<result column="id" property="id"/>
		<result column="username" property="username"/>
		<result column="disp_name" property="displayName"/>
		<result column="enabled" property="enabled"/>
		<result property="roleNames" resultMap="User.UserFilterRoleResult"/>
	</resultMap>
	
	<select id="findall-User-Match" resultMap="UserFilterResult" parameterClass="map">
		SELECT 
		<isPropertyAvailable property="hasJoin">
			DISTINCT ON (u.username, r.rolename)
		</isPropertyAvailable>
		u.id, u.username, u.disp_name, u.enabled, r.rolename
		FROM solardras.dras_user u
		<isPropertyAvailable property="hasUserGroupJoin">
			INNER JOIN solardras.dras_user_group_member m ON m.usr_id = u.id
		</isPropertyAvailable>
		<isEqual property="filter.box" compareValue="true">
			INNER JOIN solardras.dras_user_group g ON g.id = m.ugr_id
			INNER JOIN solardras.loc l ON l.id = g.loc_id
		</isEqual>
		LEFT OUTER JOIN solardras.dras_user_role r ON r.usr_id = u.id
		WHERE u.id &lt;&gt; 0
		<dynamic prepend="AND">
			<isPropertyAvailable prepend="AND" property="fts">
				fts_default @@ plainto_tsquery(#fts#)
			</isPropertyAvailable>
			<isNotNull prepend="AND" property="filter.uniqueId">
				u.username = #filter.uniqueId#
			</isNotNull>
			<isNotNull prepend="AND" property="filter.userId">
				u.id = #filter.userId#
			</isNotNull>
			<isNotNull prepend="AND" property="filter.enabled">
				u.enabled = #filter.enabled#
			</isNotNull>
			<include refid="fragment-LocationBoxFilter"/>
			<isNotEmpty prepend="AND" property="filter.roles">
				<iterate open="(" close=")" conjunction="OR" property="filter.roles">
					r.rolename = #filter.roles[]#
				</iterate>
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="filter.userGroups">
				<iterate open="(" close=")" conjunction="OR" property="filter.userGroups">
					m.ugr_id = #filter.userGroups[]#
				</iterate>
			</isNotEmpty>
		</dynamic>
		ORDER BY u.username, r.rolename
	</select>
	
	<!-- UserContact support -->
	
	<resultMap id="UserContactFullResult" class="UserContact">
		<result column="kind" property="kind"/>
		<result column="contact" property="contact"/>
		<result column="priority" property="priority"/>
	</resultMap>

	<select id="findall-User-UserContact" resultMap="UserContactFullResult" parameterClass="long">
		SELECT kind, contact, priority
		FROM solardras.dras_user_contact
		WHERE usr_id = #id#
		ORDER BY idx
	</select>
	
	<delete id="delete-User-UserContact" parameterClass="map">
		DELETE FROM solardras.dras_user_contact
		WHERE usr_id = #id#
		<isPropertyAvailable property="index">
			AND idx = #index#
		</isPropertyAvailable>
	</delete>

	<insert id="insert-User-UserContact" parameterClass="map">
		INSERT INTO solardras.dras_user_contact
			(usr_id, idx, kind, contact, priority)
		VALUES
			(#id#, #index#, #obj.kind#::solardras.contact_kind, #obj.contact#, #obj.priority#)
	</insert>

	<update id="update-User-UserContact" parameterClass="map">
		UPDATE solardras.dras_user_contact
		SET kind = #obj.kind#::solardras.contact_kind, 
			contact = #obj.contact#,
			priority = #obj.priority#
		WHERE usr_id = #id# AND idx = #index#
	</update>

	<!-- UserRole support -->

	<resultMap id="UserRoleFullResult" class="UserRole">
		<result column="rolename" property="id"/>
		<result column="description" property="description"/>
	</resultMap>

	<select id="findall-UserRole" resultMap="UserRoleFullResult">
		SELECT r.rolename, r.description
		FROM solardras.dras_role r
		ORDER BY r.rolename
	</select>
		
	<select id="findall-User-UserRole" resultMap="UserRoleFullResult" parameterClass="map">
		SELECT r.rolename, r.description
		FROM solardras.dras_user_role u
		INNER JOIN solardras.dras_role r ON r.rolename = u.rolename
		WHERE u.usr_id = #id#
		ORDER BY r.rolename
	</select>
	
	<delete id="delete-User-UserRole" parameterClass="map">
		DELETE FROM solardras.dras_user_role
		WHERE usr_id = #id#
		<isPropertyAvailable property="key">
			AND rolename = #memberId#
		</isPropertyAvailable>
	</delete>

	<insert id="insert-User-UserRole" parameterClass="map">
		INSERT INTO solardras.dras_user_role
			(usr_id, rolename)
		VALUES
			(#id#, #memberId#)
	</insert>

	<!-- Constraint support -->

	<select id="findall-User-Constraint" resultMap="Constraint.ConstraintFullResult" parameterClass="map">
		SELECT 
		<include refid="fragment-Constraint-full-result"/>
		<isPropertyAvailable property="programId">
			FROM solardras.user_program_constraint m
		</isPropertyAvailable>
		<isNotPropertyAvailable property="programId">
			FROM solardras.user_constraint m
		</isNotPropertyAvailable>
		INNER JOIN solardras.dras_constraint c ON c.id = m.con_id
		LEFT OUTER JOIN solardras.dras_constraint_dtwindow cwin ON cwin.con_id = c.id
		WHERE m.usr_id = #id#
			<isPropertyAvailable property="programId">
				AND m.pro_id = #programId#
			</isPropertyAvailable>
			AND m.eff_id = (
				SELECT MAX(eff_id)
				<isPropertyAvailable property="programId">
					FROM solardras.user_program_constraint m
				</isPropertyAvailable>
				<isNotPropertyAvailable property="programId">
					FROM solardras.user_constraint m
				</isNotPropertyAvailable>
				INNER JOIN solardras.effective e ON e.id = m.eff_id
				WHERE m.usr_id = #id# 
					<isPropertyAvailable property="programId">
						AND m.pro_id = #programId#
					</isPropertyAvailable>
					AND e.effective &lt;= 
					<isPropertyAvailable property="date">
						#date,jdbcType=TIMESTAMP#
					</isPropertyAvailable>
					<isNotPropertyAvailable property="date">
						CURRENT_TIMESTAMP
					</isNotPropertyAvailable>
			)
		ORDER BY c.id, cwin.idx
	</select>
	
	<delete id="delete-User-Constraint" parameterClass="map">
		DELETE
		<isPropertyAvailable property="programId">
			FROM solardras.user_program_constraint
		</isPropertyAvailable>
		<isNotPropertyAvailable property="programId">
			FROM solardras.user_constraint
		</isNotPropertyAvailable>
		WHERE 
			usr_id = #id# 
			<isPropertyAvailable property="programId">
				AND pro_id = #programId#
			</isPropertyAvailable>
			AND eff_id = #effectiveId#
	</delete>

	<insert id="insert-User-Constraint" parameterClass="map">
		INSERT INTO 
		<isPropertyAvailable property="programId">
			solardras.user_program_constraint
		</isPropertyAvailable>
		<isNotPropertyAvailable property="programId">
			solardras.user_constraint
		</isNotPropertyAvailable>
			(usr_id, 
			<isPropertyAvailable property="programId">
				pro_id,
			</isPropertyAvailable>
			con_id, eff_id)
		VALUES
			(#id#,
			<isPropertyAvailable property="programId">
				#programId#,
			</isPropertyAvailable>
			#memberId#, #effectiveId#)
	</insert>

	<!-- Fee -->

	<select id="findall-User-Fee" resultMap="Fee.FeeFullResult" parameterClass="map">
		SELECT 
		<include refid="fragment-Fee-full-result"/>
		FROM solardras.fee f
		INNER JOIN solardras.user_fee m ON m.fee_id = f.id
		WHERE m.usr_id = #id#
		AND m.eff_id = (
			SELECT MAX(eff_id)
			FROM solardras.user_fee m
			INNER JOIN solardras.effective e ON e.id = m.eff_id
			WHERE m.usr_id = #id# 
				AND e.effective &lt;= 
				<isPropertyAvailable property="date">
					#date,jdbcType=TIMESTAMP#
				</isPropertyAvailable>
				<isNotPropertyAvailable property="date">
					CURRENT_TIMESTAMP
				</isNotPropertyAvailable>
		)
	</select>
	
	<delete id="delete-User-Fee" parameterClass="map">
		DELETE FROM solardras.user_fee
		WHERE usr_id = #id# AND eff_id = #effectiveId#
	</delete>

	<insert id="insert-User-Fee" parameterClass="map">
		INSERT INTO solardras.user_fee
			(usr_id, fee_id, eff_id)
		VALUES
			(#id#, #memberId#, #effectiveId#)
	</insert>

</sqlMap>
